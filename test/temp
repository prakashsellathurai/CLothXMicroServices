var admin = require('firebase-admin')

var serviceAccount = require('../functions/environment/clothxnet-firebase-adminsdk-wkk1h-a27faaab6d.json')

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: 'https://clothxnet.firebaseio.com'

})
var firestore = admin.firestore()
function OnCreateNewcCLothes (userId, clothId, crn) {
  // db refrerences
  var userRef = firestore.collection('user').doc(userId)
  var clothRef = firestore.collection(`user/${userId}/clothes`).doc(`${clothId}`)
  var crnContentref = firestore.collection(`user/${userId}/crnContent`)
  // get Next Index POinTR
  function OncreateHandler (clothId, userId, crn) {
    var userRef = firestore.collection('user').doc(userId)
    var clothRef = firestore.collection(`user/${userId}/clothes`).doc(`${clothId}`)

    return getOrCreateNextPointer(userRef).then((nextPointerValue) => {
      return AssignCRNvalue(clothRef, nextPointerValue)
    }).then((AssignedCRNalue) => {
      return (AssignedCRNalue, updatecrnIndex(userRef, AssignedCRNalue))
    }).then((AssignedCRNalue, updatedcrnIndex) => {
      return AddCrnContent(AssignedCRNalue, clothId, userId, clothRef)
    })
  }
  function getOrCreateNextPointer (userRef) {
    return userRef.get().then((Userdoc, context) => {
      console.log(Userdoc.data().crnIndex)
      return (Userdoc.crnIndex.nextIndexPointer !== undefined) ? Userdoc.crnIndex.nextIndexPointer : IntializeNextPointerIndex(userRef)
    })
  }
  function IntializeNextPointerIndex (userRef) {
    return userRef.set({crnIndex: {nextIndexPointer: 1}}).then(val => { return 1 })
  }
  function AssignCRNvalue (clothRef, nextPointerValue) {
    return clothRef.update({crn: nextPointerValue}).then(val => { return nextPointerValue })
  }
  function updatecrnIndex (userRef, AssignedCRNalue) {
    return userRef.update({crnIndex: {nextIndexPointer: AssignCRNvalue + 1}}).then((val) => { return AssignCRNvalue })
  }
  function AddCrnContent (AssignedCRNalue, clothId, userId, clothRef) {
    return firestore.collection(`user/${userId}/crnContent`).doc(`${AssignCRNvalue}`).set({ClothRef: `${clothRef}`, id: `${AssignCRNvalue}`, allocated: true})
  }
  // push to promises
  Promise.all([OncreateHandler(clothId, userId, crn)])
}
var userId = 'ZPnEUNe3l7NR0LYFj0dH'
var clothId = 'Jd99Et9iQdiKzTcDBtZq' // Math.random().toString(36).substr(2, 19)
var crn = Math.random() * 10
console.log(clothId, crn)
function runMultiUsers (userId) {
  let array = Array.from(new Array(7), (val, index) => index)
  let promise = []
  for (let index = 1; index < array.length; index++) {
    promise.push(firestore.collection(`user/${userId}/clothes/`).doc(`${index}`).set({crn: 45}))
  }
  return Promise.all([promise])
}
function createNewClothTrigger (userId) {
  return runMultiUsers(userId)
}

function runMultipleclothIDcheck (userId) {
  let array = Array.from(new Array(7), (val, index) => index)
  let promise = []
  for (let index = 1; index < array.length; index++) {
    promise.push(OnCreateNewcCLothes(userId, index, 45))
  }
  return Promise.all([promise])
}
Promise.all([createNewClothTrigger(userId), runMultipleclothIDcheck(userId)])
